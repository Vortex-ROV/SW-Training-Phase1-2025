# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\WebCamViewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
import cv2

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(871, 670)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.WebCam = QtWidgets.QLabel(self.centralwidget)
        self.WebCam.setGeometry(QtCore.QRect(14, 15, 841, 531))
        self.WebCam.setText("Webcam not working")
        self.WebCam.setAlignment(QtCore.Qt.AlignCenter)
        self.WebCam.setScaledContents(True)
        self.WebCam.setObjectName("WebCam")

        self.Start_button = QtWidgets.QPushButton(self.centralwidget)
        self.Start_button.setGeometry(QtCore.QRect(90, 560, 141, 41))
        self.Start_button.setObjectName("Start_button")

        self.Stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.Stop_button.setGeometry(QtCore.QRect(650, 560, 141, 41))
        self.Stop_button.setObjectName("Stop_button")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 871, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.running = False
        self.cap = None
        self.thread = None

        self.Start_button.clicked.connect(self.start_webcam)
        self.Stop_button.clicked.connect(self.stop_webcam)
        self.Stop_button.setEnabled(False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "WebCam Viewer"))
        self.Start_button.setText(_translate("MainWindow", "Start"))
        self.Stop_button.setText(_translate("MainWindow", "Stop"))

    def start_webcam(self):
        if not self.running:
            self.cap = cv2.VideoCapture(0)

            self.running = True
            self.Start_button.setEnabled(False)
            self.Stop_button.setEnabled(True)

            self.thread = threading.Thread(target=self.update_frame, daemon=True)
            self.thread.start()

    def stop_webcam(self):
        if self.running:
            self.running = False
            self.thread.join()  
            self.cap.release()  
            self.WebCam.setPixmap(QPixmap()) 
            self.WebCam.setText("Webcam stopped.")
            self.Start_button.setEnabled(True)
            self.Stop_button.setEnabled(False)

    def update_frame(self):
        while self.running:
            ret, frame = self.cap.read()
            if ret:
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                height, width, channel = frame.shape
                step = channel * width

                q_img = QImage(frame.data, width, height, step, QImage.Format_RGB888)
                pixmap = QPixmap.fromImage(q_img)
                self.WebCam.setPixmap(pixmap)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
