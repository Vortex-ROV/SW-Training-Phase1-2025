from abc import ABC, abstractmethod
import threading
import random
import time

#base class 

class ROV(ABC):
    def __init__(self, rov_id, rov_type):
        self.rov_id = rov_id
        self.rov_type = rov_type
        self.status = 'Idle'
        self.battery_level = 100  # Percentage
        self.mission_queue = []
        self.position = (0, 0)  # Starting coordinates
        self.lock = threading.Lock()  # To synchronize status updates

    def receive_mission(self, mission):
        self.mission_queue.append(mission)
        print(f"ROV {self.rov_id} received mission {mission['mission_id']}")

    #abstract method will be implemented in each subclass
    @abstractmethod
    def execute_mission(self):
        pass

    def check_battery(self):
        if self.battery_level <= 20:
            self.status = 'Low Battery'
            print(f"ROV {self.rov_id} is running low on battery. Current level: {self.battery_level}%")

    def navigate_to(self, target_position):
        print(f"ROV {self.rov_id} is navigating to {target_position}...")
        time.sleep(random.uniform(1, 3))  # Simulate time delay
        self.position = target_position
        print(f"ROV {self.rov_id} arrived at {target_position}")

    def send_status_update(self):
        with self.lock:
            print(f"[Status] ROV {self.rov_id}: {self.status}, Battery: {self.battery_level}%")

#inheret from super class

class ExplorationROV(ROV): 
    def __init__(self, rov_id):
        super().__init__(rov_id, 'Exploration')

    def execute_mission(self):
        if self.mission_queue:
            mission = self.mission_queue.pop(0)
            self.status = 'In Mission'
            self.send_status_update()

            self.navigate_to(mission['target_location'])
            print(f"ROV {self.rov_id} is mapping the area at {mission['target_location']}...")
            time.sleep(random.uniform(2, 5))  # Simulate time for mapping
            print(f"ROV {self.rov_id} completed mapping at {mission['target_location']}")
            
            self.battery_level -= random.randint(10, 30)  # Battery consumption
            self.status = 'Idle'
            self.send_status_update()
            self.check_battery()


class SamplingROV(ROV):
    def __init__(self, rov_id):
        super().__init__(rov_id, 'Sampling')

    def execute_mission(self):
        if self.mission_queue:
            mission = self.mission_queue.pop(0)
            self.status = 'In Mission'
            self.send_status_update()

            self.navigate_to(mission['target_location'])
            print(f"ROV {self.rov_id} is collecting sample at {mission['target_location']}...")
            time.sleep(random.uniform(2, 5))  # Simulate time for collecting samples
            print(f"ROV {self.rov_id} completed collecting sample at {mission['target_location']}")
            
            self.battery_level -= random.randint(10, 25)  # Battery consumption
            self.status = 'Idle'
            self.send_status_update()
            self.check_battery()


class MaintenanceROV(ROV):
    def __init__(self, rov_id):
        super().__init__(rov_id, 'Maintenance')

    def execute_mission(self):
        if self.mission_queue:
            mission = self.mission_queue.pop(0)
            self.status = 'In Mission'
            self.send_status_update()

            self.navigate_to(mission['target_location'])
            print(f"ROV {self.rov_id} is performing maintenance at {mission['target_location']}...")
            time.sleep(random.uniform(2, 5))  # Simulate time for maintenance
            print(f"ROV {self.rov_id} completed maintenance at {mission['target_location']}")
            
            self.battery_level -= random.randint(15, 30)  # Battery consumption
            self.status = 'Idle'
            self.send_status_update()
            self.check_battery()
